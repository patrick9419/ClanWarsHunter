package chatgptscripts;

import org.dreambot.api.methods.map.Area;
import org.dreambot.api.methods.map.Tile;
import org.dreambot.api.methods.tabs.Tab;
import org.dreambot.api.wrappers.interactive.Player;
import org.dreambot.api.wrappers.widgets.WidgetChild;
import org.dreambot.api.script.AbstractScript;
import org.dreambot.api.script.Category;
import org.dreambot.api.script.ScriptManifest;
import org.dreambot.api.methods.widget.Widgets;
import org.dreambot.api.utilities.Timer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashSet;
import java.util.Set;

@ScriptManifest(author = "Hellz", name = "Clan Wars Hunter", version = 1.5,
        description = "Teleports to Clan Wars, roams FFA with human-like behavior, attacks targets",
        category = Category.COMBAT)
public class ClanWarsHunter extends AbstractScript {

    private final Area feroxEnclave = new Area(3138, 3636, 3144, 3644);
    private final Tile ffaPortalTile = new Tile(3127, 3639, 0);
    private final Area ffaSafeZone = new Area(3003, 9866, 3011, 9874, 0);
    private final Tile ffaPvpTile = new Tile(3001, 9865, 0);
    private final Area roamZone = new Area(2990, 9880, 3020, 9910);

    private final Set<String> targetNames = new HashSet<>();
    private String protectedName = "";
    private long lastRoamTime = 0;

    @Override
    public void onStart() {
        log("Loading target names from targets.txt …");
        File list = new File(getDirectoryData(), "targets.txt");
        try (BufferedReader br = new BufferedReader(new FileReader(list))) {
            String line;
            boolean isFirstLine = true;
            while ((line = br.readLine()) != null) {
                if (!line.trim().equals("")) {
                    String name = line.trim().toLowerCase();
                    if (isFirstLine) {
                        protectedName = name;
                        isFirstLine = false;
                        log("Protecting: " + protectedName);
                    }
                    targetNames.add(name);
                }
            }
            log("Loaded " + targetNames.size() + " names.");
        } catch (Exception e) {
            log("Couldn't read targets.txt: " + e.getMessage());
        }
    }

    @Override
    public int onLoop() {
        if (!feroxEnclave.contains(getLocalPlayer())) {
            teleportToClanWars();
            return sleep(2000, 3500);
        }

        if (getLocalPlayer().getTile().distance(ffaPortalTile) > 6 && !isInsideFfa()) {
            getWalking().walk(ffaPortalTile);
            sleepUntil(() -> getLocalPlayer().getTile().distance(ffaPortalTile) <= 2, 6000);
            return sleep(400, 800);
        }

        if (!isInsideFfa()) {
            getGameObjects().closest("Free-for-all portal").interact("Enter");
            sleepUntil(this::isInsideFfa, 6000);
            return sleep(1000, 1800);
        }

        if (ffaSafeZone.contains(getLocalPlayer())) {
            log("In safe-zone; walking out to PvP area …");
            getWalking().walk(ffaPvpTile);
            sleepUntil(() -> !ffaSafeZone.contains(getLocalPlayer()), 6000);
            return sleep(600, 1000);
        }

        if (!attackNearbyTargets()) {
            if (System.currentTimeMillis() - lastRoamTime > (5000 + (int) (Math.random() * 5000))) {
                roamAround();
                lastRoamTime = System.currentTimeMillis();
            } else {
                log("Scanning… standing still for a bit.");
                sleep(600, 1200);
            }
        }

        return sleep(600, 1200);
    }

    private void teleportToClanWars() {
        log("Teleporting via Grouping tab …");
        getTabs().open(Tab.GROUPING);
        sleep(300, 600);
        WidgetChild clanWarsTele = Widgets.getWidgetChild(701, 15);
        if (clanWarsTele != null && clanWarsTele.isVisible()) {
            clanWarsTele.interact("Teleport");
            sleepUntil(() -> feroxEnclave.contains(getLocalPlayer()), 8000);
        } else {
            log("Grouping interface not found / Clan Wars row missing.");
        }
    }

    private boolean isInsideFfa() {
        return getGameObjects().closest("Exit portal") != null;
    }

    private boolean attackNearbyTargets() {
        for (Player p : getPlayers().all()) {
            String n = p.getName().toLowerCase();
            if (targetNames.contains(n)
                    && !n.equals(protectedName)
                    && p.getTile().distance(getLocalPlayer()) <= 8
                    && !p.isInCombat()) {

                log("Attacking target: " + p.getName());
                sleep(200, 400);
                p.interact("Attack");
                sleepUntil(() -> getLocalPlayer().isInCombat(), 5000);
                return true;
            }
        }
        return false;
    }

    private void roamAround() {
        Tile randTile = roamZone.getRandomTile();
        log("Roaming randomly to " + randTile);
        getWalking().walk(randTile);
        sleep(600, 1200);
        if (Math.random() > 0.9) {
            log("Pausing to emulate human hesitation.");
            sleep(1000, 2000);
        }
    }
}
